from enaml.widgets.api import *
from enaml.layout.api import *
import sinteglas
from sinteglas.views.view_order import OrderDialog
from sinteglas.pedidos import especificacao
from sinteglas.pedidos._pedido import MODELOS
from sinteglas.views.reports import SinteglasReportsWindow
from enamlext.widgets import Table, Column, ask_yes_no, ask_text, Field
from enaml.stdlib.fields import IntField
from enaml.stdlib.message_box import critical


def format_date(dt):
    return format_dt(dt, '%d/%m/%Y')


def format_datetime(dt):
    return format_dt(dt, '%d/%m/%Y %H:%M')


def format_dt(dt, fmt):
    if dt is not None:
        return dt.strftime(fmt)
    else:
        return ''


enamldef NovoItemPedidoDialog(Dialog):
    title = 'Novo Item de Pedido'

    alias quantidade: field_quantidade.value
    alias tamanho: cbo_tamanho.selected
    alias espessura: cbo_espessura.selected
    alias modelo: cbo_modelo.selected
    alias codigo: ed_codigo.text
    alias op_id: lb_op_id.text
    alias cliente: lb_cliente.text

    Container:
        Form:
            Label:
                text = 'OP ID'
            Label: lb_op_id:
                pass
            Label:
                text = 'Cliente'
            Label: lb_cliente:
                pass
            Label:
                text = 'Quantidade'
            IntField: field_quantidade:
                pass

            Label:
                text = 'Tamanho'
            ObjectCombo: cbo_tamanho:
                items = especificacao.tamanhos

            Label:
                text = 'Espessura'
            ObjectCombo: cbo_espessura:
                items = especificacao.espessuras

            Label:
                text = 'Modelo'
            ObjectCombo: cbo_modelo:
                items = [m[0] for m in MODELOS]

            # TODO: o codigo por enquanto vai ser entrada de texto livre, mas futuramente sera validado contra a base de dados
            Label:
                text = 'Codigo'
            Field: ed_codigo:
                pass

        Separator:
            pass

        Container:
            constraints = [hbox(spacer, btn_ok, btn_cancel)]
            PushButton: btn_ok:
                text = 'OK'
                enabled << bool(quantidade > 0 and codigo.strip())
                clicked ::
                    accept()

            PushButton: btn_cancel:
                text = 'Cancel'
                clicked ::
                    reject()




enamldef PedidosView(MainWindow): mw:
    attr controller

    title = 'Sinteglas %s' % sinteglas.version

    initial_size = (1024, 728)

    initialized ::
        self.center_on_screen()

    MenuBar:
        pass

    Container:
        constraints << [
            hbox(
                vbox(tabela_de_pedidos,
                     btn_novo_pedido),
                vbox(tabela_de_itens_de_pedido,
                     botoes,
                     gb_observacoes),
            ),
            tabela_de_pedidos.width == tabela_de_itens_de_pedido.width,
            gb_observacoes.height == 0.5 * tabela_de_itens_de_pedido.height,
        ]

        Table: tabela_de_pedidos:
            columns = [
                Column('OP ID', 'op_id', align='center'),
                Column('Data de Entrada', 'data_entrada',
                       formatter=format_date, align='center'),
                Column('Itens de Pedido', lambda o: len(o.itens),
                       align='right'),
                Column('Cliente', 'cliente'),
            ]

            rows << controller.pedidos

            selected_rows ::
                if len(selected_rows) == 1:
                    controller.pedido_selecionado = selected_rows[0]
                else:
                    controller.pedido_selecionado = None

            alternate_row_colors = True
            stretch_last_column = True
#            row_style_callback = row_style_callback

        PushButton: btn_novo_pedido:
            text = 'Novo Pedido'
            clicked ::
                print text

        Table: tabela_de_itens_de_pedido:
            enabled << controller.pedido_selecionado is not None
            columns = [

#                Column('Item ID', 'item_id', align='center'),
                Column('Quantidade', 'quantidade', align='right'),
                Column('Modelo', lambda o: '%s %s' % (o.modelo, o.codigo), align='center'),
                Column('Especificacao', 'especificacao', align='center'),
                Column('Peso', lambda o: o.especificacao.peso, align='right',
                        formatter=lambda x: '%.3f' % x),
                Column('Qtd.Produzida', 'total_entregue', align='right'),
                Column('Qtd. A Produzir', 'total_restante', align='right'),
            ]

            rows << controller.itens_de_pedido

            selected_rows ::
                if len(selected_rows) == 1:
                    controller.item_de_pedido_selecionado = selected_rows[0]
                else:
                    controller.item_de_pedido_selecionado = None

            alternate_row_colors = True
            stretch_last_column = True
#            row_style_callback = row_style_callback

        Container: botoes:
            padding = 0
            constraints = [hbox(btn_novo_item_pedido,
                                btn_entrar_quantidade_produzida),
                           btn_novo_item_pedido.width == btn_entrar_quantidade_produzida.width]

            PushButton: btn_novo_item_pedido:
                text = 'Novo Item de Pedido'
                clicked ::
                    dlg = NovoItemPedidoDialog(
                        op_id=str(controller.pedido_selecionado.op_id),
                        cliente=controller.pedido_selecionado.cliente,
                    )
                    if dlg.exec_():
                        L, C = dlg.tamanho
                        esp = especificacao.Especificacao(largura=L, comprimento=C, espessura=dlg.espessura)
                        controller.pedido_selecionado.adicionar_item(
                            quantidade=dlg.quantidade,
                            especificacao=esp,
                            modelo=dlg.modelo,
                            codigo=dlg.codigo,
                        )
                        controller.pedidos = controller.pedidos[:]
                        controller.atualizar_itens_de_pedido_para_o_pedido_selecionado()

            PushButton: btn_entrar_quantidade_produzida:
                enabled << controller.item_de_pedido_selecionado is not None
                text = 'Entrar Quantidade Produzida'
                clicked ::
                    quantidade = ask_text(title='Entrar Quantidade Produzida',
                        message='Entre a quantidade produzida no campo abaixo:',
                        parent=mw)
                    if quantidade:
                        try:
                            controller.item_de_pedido_selecionado.adicionar_entrega(
                                int(quantidade))
                        except RuntimeError as ex:
                            critical(parent=mw,
                                     title='Erro',
                                     text=str(ex))
                        else:
                            pedido_selecionado = controller.pedido_selecionado
                            item_selecionado = controller.item_de_pedido_selecionado
                            controller.pedido_selecionado = None
                            controller.pedido_selecionado = pedido_selecionado
                            controller.item_de_pedido_selecionado = item_selecionado

        GroupBox: gb_observacoes:
            enabled << controller.item_de_pedido_selecionado is not None

            Table: tabela_de_observacoes_do_item_de_pedido_selecionado:

                columns = [
                    Column('Data/Hora', 'data_hora', formatter=format_datetime,
                           align='center'),
                    Column('Autor', 'autor'),
                    Column('Observacao', 'texto'),
                ]

                rows << controller.observacoes_do_item_de_pedido_selecionado

                alternate_row_colors = True
                stretch_last_column = True

            PushButton:
                text = 'Adicionar Observacao'
                clicked ::
                    obs = ask_text(title='Adicionar Observacao',
                                    message='Entre com a observacao no campo abaixo:',
                                    parent=mw)
                    if text:
                        controller.adicionar_observacao_ao_item_de_pedido_selecionado(obs)




def row_style_callback(row, row_index, role):
    from PyQt4.QtGui import *
    from PyQt4.QtCore import *
    import datetime
    if role == Qt.ForegroundRole:
        if row.is_open():
            if row.estimated_delivery_date <= datetime.date.today():
                return QColor(Qt.red)
            else:
                return QColor(Qt.darkGreen)
        else:
            if row.estimated_delivery_date < row.delivery_date:
                return QColor(Qt.red)
            else:
                return QColor(Qt.darkGreen)


enamldef Main(PedidosView):
    pass
