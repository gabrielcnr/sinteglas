from enaml.widgets.api import *
from enaml.layout.api import *
import sinteglas
from sinteglas.views.view_order import OrderDialog
from enamlext.widgets import Table, Column, ask_yes_no

def format_date(dt):
    return format_dt(dt, '%d/%m/%Y')


def format_datetime(dt):
    return format_dt(dt, '%d/%m/%Y %H:%M')


def format_dt(dt, fmt):
    if dt is not None:
        return dt.strftime(fmt)
    else:
        return ''


enamldef Main(MainWindow):
    attr controller

    title = 'Sinteglas %s' % sinteglas.version

    initial_size = (1024, 728)

    initialized ::
        self.center_on_screen()
        nonlocals.controller.load_orders()

    MenuBar:
        pass

    Container:

        GroupBox:

            constraints << [
                hbox(btn_new, btn_edit, btn_delete, chk_show_closed, spacer, btn_reports,  btn_refresh),
                btn_new.width == btn_edit.width == btn_delete.width == btn_refresh.width, btn_refresh.width == btn_reports.width,
                align('v_center', btn_new, btn_edit, btn_delete, chk_show_closed, btn_refresh, btn_reports),
            ]

            PushButton: btn_new:
                text = 'New'
                clicked ::
                    dlg = OrderDialog()
                    dlg.center_on_screen()
                    if dlg.exec_():
                        controller.save_new_order(dlg.order_params)

            PushButton: btn_edit:
                text = 'Edit'

            PushButton: btn_delete:
                text = 'Delete'
                clicked ::
                    if ask_yes_no('Delete Confirmation',
                                  'Are you sure you want to delete this order?',
                                  parent=self):
                        print 'yeahhhhhh'

            CheckBox: chk_show_closed:
                text = 'Show Closed Orders'
                checked := controller.show_closed

            PushButton: btn_reports:
                text = 'Reports'
                clicked ::
                    print text

            PushButton: btn_refresh:
                text = 'Refresh'
                clicked ::
                    controller.load_orders()

        Table: table:
            columns = [
                Column('Estimated Delivery Date', 'estimated_delivery_date',
                       formatter=format_date),
                Column('Delivery Date', 'delivery_date',
                       formatter=format_date,),
                Column('Client', 'client'),
                Column('Created By', 'created_by'),
                Column('Created Date', 'created_date',
                       formatter=format_datetime),
                Column('Description', 'description'),
            ]
            rows << controller.visible_orders

            alternate_row_colors = True
            stretch_last_column = True
            row_style_callback = row_style_callback


    StatusBar:
        StatusItem:
            Label:
                text << 'Total: {}'.format(len(controller.orders))

        StatusItem:
            Label:
                text << 'Open/Delayed: {}'.format(controller.count_open_delayed_orders)

        StatusItem:
            Label:
                text << 'Open/OnTime: {}'.format(controller.count_open_ontime_orders)



def row_style_callback(row, row_index, role):
    from PyQt4.QtGui import *
    from PyQt4.QtCore import *
    import datetime
    if role == Qt.ForegroundRole:
        if row.is_open():
            if row.estimated_delivery_date <= datetime.date.today():
                return QColor(Qt.red)
            else:
                return QColor(Qt.darkGreen)
        else:
            if row.estimated_delivery_date < row.delivery_date:
                return QColor(Qt.red)
            else:
                return QColor(Qt.darkGreen)

